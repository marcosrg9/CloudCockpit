import { AfterViewInit, Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { pty, TerminalService } from 'src/app/services/terminal.service';
import { Terminal } from 'src/app/models/terminal.model';
import { Subject } from 'rxjs';
import { ServersService } from 'src/app/services/servers.service';


import { SeqParser } from '../../../models/sequenceParser.model'
import { Router } from '@angular/router';

@Component({
  selector: 'app-terms',
  templateUrl: './terms.component.html',
  styleUrls: ['./terms.component.css', './xterm.theme.css'],
})
export class TermsComponent implements AfterViewInit, OnDestroy, OnInit {

  @HostListener('document:keydown', ['$event'])
  keyDown(ev: KeyboardEvent) {
    console.log(ev);
    this.terms.write(SeqParser.parse(ev));
  }

  @ViewChild('terminal') terminal: ElementRef<HTMLDivElement>;

  public tabs = new Array(10);
  public focusTab: pty;
  
  constructor(public terms: TerminalService,
              public servers: ServersService,
              public router: Router) {

    if (!this.terms.pending && this.terms.ptys.length < 1) router.navigate(['/main'])
  }

  ngAfterViewInit(): void {


    /* window.onresize = () => {
      this.terms.resize(this.terminal.nativeElement);
    } */

    this.createTerminal();

  }

  public createTerminal() {

    if (this.terms.waitForCreate && typeof this.terms.waitForCreate === 'number') {
      this.terms.terminal.fitAddon.fit();
  
      setTimeout(() => {
        //@ts-ignore
        this.terms.createTerminal(this.terms.waitForCreate);
        this.terms.waitForCreate = null;
      }, 100)
    }
    
  }

  public focus(server: number, pid: number) {

    if (this.terms.focusTerminal) {
      const { server: fS, pid: fP } = this.terms.focusTerminal;

      if (fS === server && fP === pid ) return;
    }

    const pty = this.terms.focus(server, pid);

    if (pty) {
      this.focusTab = pty;
      pty.terminal.open(this.terminal.nativeElement)
    };

  }

  ngOnInit(): void {
    //Establece el modo oscuro (minimiza el contraste de la consola)
    //document.documentElement.setAttribute('data-color-mode', 'dark');
  }
  
  ngOnDestroy(): void {
    // Restablece el tema al estado por defecto (autom√°tico).
    //document.documentElement.setAttribute('data-color-mode', 'auto');
    window.onresize = null;
  }

}
